name: Test

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.ref_name || github.run_id }}
  cancel-in-progress: true

jobs:

  check-juliaup:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        label: [
          x86_64-pc-windows-msvc-windowsstore,
          x86_64-pc-windows-msvc-windowsappinstaller,
          x86_64-pc-windows-gnu-msi,
          x86_64-pc-windows-gnu-msi,
          x86_64-apple-darwin,
          x86_64-unknown-linux-gnu,
          x86_64-unknown-linux-musl,
          x86_64-unknown-freebsd,
          i686-pc-windows-msvc-windowsstore,
          i686-pc-windows-msvc-windowsappinstaller,
          i686-pc-windows-gnu-msi,
          i686-unknown-linux-gnu,
          i686-unknown-linux-musl,
          aarch64-unknown-linux-gnu,
          aarch64-unknown-linux-musl,
          aarch64-apple-darwin
          ]
        include:
          - label: x86_64-pc-windows-msvc-windowsstore
            target: x86_64-pc-windows-msvc
            os: windows
            features: windowsstore,binjuliainstaller,binjulialauncher
            rustflags:
          - label: x86_64-pc-windows-msvc-windowsappinstaller
            target: x86_64-pc-windows-msvc
            os: windows
            features: windowsappinstaller,binjuliainstaller,binjulialauncher
            rustflags:
          - label: x86_64-pc-windows-gnu-msi
            target: x86_64-pc-windows-gnu
            os: windows
            features: windowsappinstaller,binjuliainstaller,binjulialauncher
            rustflags:
          - label: i686-pc-windows-gnu-msi
            target: i686-pc-windows-gnu
            os: windows
            features: windowsappinstaller,binjuliainstaller,binjulialauncher
            rustflags:
          - label: x86_64-apple-darwin
            target: x86_64-apple-darwin
            os: macos
            features: selfupdate,binjuliainstaller,binjulialauncher
            rustflags:
          - label: x86_64-unknown-linux-gnu
            target: x86_64-unknown-linux-gnu
            os: ubuntu
            features: selfupdate,binjuliainstaller,binjulialauncher
            rustflags:
          - label: x86_64-unknown-linux-musl
            target: x86_64-unknown-linux-musl
            os: ubuntu
            features: selfupdate,binjuliainstaller,binjulialauncher
            rustflags: -C target-feature=+crt-static
          - label: x86_64-unknown-freebsd
            target: x86_64-unknown-freebsd
            os: ubuntu
            features: selfupdate,binjuliainstaller,binjulialauncher
            rustflags:
          - label: i686-pc-windows-msvc-windowsstore
            target: i686-pc-windows-msvc
            os: windows
            features: windowsstore,binjuliainstaller,binjulialauncher
            rustflags:
          - label: i686-pc-windows-msvc-windowsappinstaller
            target: i686-pc-windows-msvc
            os: windows
            features: windowsappinstaller,binjuliainstaller,binjulialauncher
            rustflags:
          - label: i686-unknown-linux-gnu
            target: i686-unknown-linux-gnu
            os: ubuntu
            features: selfupdate,binjuliainstaller,binjulialauncher
            rustflags:
          - label: i686-unknown-linux-musl
            target: i686-unknown-linux-musl
            os: ubuntu
            features: selfupdate,binjuliainstaller,binjulialauncher
            rustflags: -C target-feature=+crt-static
          - label: aarch64-unknown-linux-gnu
            target: aarch64-unknown-linux-gnu
            os: ubuntu
            features: selfupdate,binjuliainstaller,binjulialauncher
            rustflags:
          - label: aarch64-unknown-linux-musl
            target: aarch64-unknown-linux-musl
            os: ubuntu
            features: selfupdate,binjuliainstaller,binjulialauncher
            rustflags: -C target-feature=+crt-static
          - label: aarch64-apple-darwin
            target: aarch64-apple-darwin
            os: macos
            features: selfupdate,binjuliainstaller,binjulialauncher
            rustflags:
    steps:
    - uses: actions/checkout@v4
    - if: ${{ contains(matrix.target, '-musl') }}
      run: sudo apt-get install musl-tools
    - uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: ${{matrix.target}}
    - name: Check build
      uses: clechasseur/rs-cargo@v2
      with:
        command: check
        use-cross: ${{ matrix.os == 'ubuntu' }}
        args: --release --bins --target ${{matrix.target}} --features ${{matrix.features}}
      env:
        CARGO_TARGET_x86_64-unknown-linux-musl: ${{matrix.rustflags}}
        CARGO_TARGET_i686-unknown-linux-musl: ${{matrix.rustflags}}
        CARGO_TARGET_aarch64-unknown-linux-musl: ${{matrix.rustflags}}

  test-juliaup:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        target: [
          x86_64-pc-windows-msvc,
          x86_64-pc-windows-gnu,
          x86_64-apple-darwin,
          x86_64-unknown-linux-gnu,
          x86_64-unknown-linux-musl,
          x86_64-unknown-freebsd,
          i686-pc-windows-msvc,
          i686-pc-windows-gnu,
          ]
        include:
          - target: x86_64-pc-windows-msvc
            os: windows
            features: dummy,binjulialauncher
            rustflags:
            toolchain: stable
          - target: x86_64-pc-windows-gnu
            os: windows
            features: dummy,binjulialauncher
            rustflags:
            toolchain: stable-gnu
          - target: x86_64-apple-darwin
            os: macos
            features: dummy,binjulialauncher
            rustflags:
            toolchain: stable
          - target: x86_64-unknown-linux-gnu
            os: ubuntu
            features: dummy,binjulialauncher
            rustflags:
            toolchain: stable
          - target: x86_64-unknown-linux-musl
            os: ubuntu
            features: dummy,binjulialauncher
            rustflags: -C target-feature=+crt-static
            toolchain: stable
          - target: x86_64-unknown-freebsd
            os: ubuntu
            features: dummy,binjulialauncher
            rustflags:
            toolchain: stable
          - target: i686-pc-windows-msvc
            os: windows
            features: dummy,binjulialauncher
            rustflags:
            toolchain: stable
          - target: i686-pc-windows-gnu
            os: windows
            features: dummy,binjulialauncher
            rustflags:
            toolchain: stable-i686-gnu
    steps:
    - uses: actions/checkout@v4
    - if: ${{ contains(matrix.target, '-musl') }}
      run: sudo apt-get install musl-tools
    - uses: egor-tensin/setup-mingw@v2
      if: ${{ contains(matrix.toolchain, 'stable-i686-gnu') }}
      with:
        platform: x86
        version: 12.2.0
    - uses: actions-rust-lang/setup-rust-toolchain@v1
      if: ${{ ! contains(matrix.target, 'freebsd') }}
      with:
        toolchain: ${{matrix.toolchain}}
        target: ${{matrix.target}}
    - name: Test
      if: ${{ ! contains(matrix.target, 'freebsd') }}
      run: cargo test --target ${{matrix.target}} --features ${{matrix.features}}
      env:
        CARGO_TARGET_x86_64-unknown-linux-musl: ${{matrix.rustflags}}
        CARGO_TARGET_i686-unknown-linux-musl: ${{matrix.rustflags}}
        CARGO_TARGET_aarch64-unknown-linux-musl: ${{matrix.rustflags}}
    - name: Test FreeBSD
      if: ${{ contains(matrix.target, 'freebsd') }}
      uses: vmactions/freebsd-vm@v1
      with:
        release: "13.4"
        usesh: true
        mem: 8192
        copyback: false
        prepare: |
          pkg install -y curl
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{matrix.toolchain}}
        run: |
          . "${HOME}/.cargo/env"
          export RUST_BACKTRACE=full
          cargo test --target ${{matrix.target}} --features ${{matrix.features}}

  test-msix-packaging:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Validate MSIX manifest
      shell: pwsh
      run: |
        # Find makeappx.exe from Windows SDK (x64 version)
        $sdkPath = "C:\Program Files (x86)\Windows Kits\10\bin"
        $makeappx = Get-ChildItem -Path $sdkPath -Recurse -Filter "makeappx.exe" -ErrorAction SilentlyContinue | 
          Where-Object { $_.FullName -match "\\x64\\" } | 
          Select-Object -First 1
        if (-not $makeappx) {
          Write-Error "makeappx.exe (x64) not found in Windows SDK"
          exit 1
        }
        Write-Host "Found makeappx at: $($makeappx.FullName)"
        
        # Create a minimal test structure
        $testDir = "test-msix-validation"
        New-Item -ItemType Directory -Force -Path $testDir
        
        # Copy manifest and substitute variables
        $manifest = Get-Content deploy\msix\appxmanifest.xml -Raw
        $manifest = $manifest -replace '\{\{ Version \}\}', '1.0.0'
        $manifest = $manifest -replace '\{\{ ProcessorArchitecture \}\}', 'x64'
        $manifest = $manifest -replace '\{\{\{IdentityPublisher\}\}\}', 'CN=Test'
        $manifest = $manifest -replace '\{\{\{PublisherDisplayName\}\}\}', 'Test Publisher'
        $manifest | Out-File -FilePath "$testDir\AppxManifest.xml" -Encoding utf8
        
        # Create minimal required files
        New-Item -ItemType Directory -Force -Path "$testDir\Julia"
        New-Item -ItemType File -Force -Path "$testDir\Julia\juliaup.exe"
        New-Item -ItemType File -Force -Path "$testDir\Julia\julialauncher.exe"
        
        # Copy required image assets
        Copy-Item deploy\msix\Images -Recurse -Destination $testDir\Images -Force
        
        # Try to pack (this will validate the manifest)
        & $makeappx.FullName pack /d $testDir /p test.msix
    - name: Build for App Installer
      run: cargo build --release --bin juliaup --bin julialauncher --target x86_64-pc-windows-msvc --features windowsappinstaller,binjulialauncher
    - name: Copy binaries to expected location for App Installer
      run: |
        New-Item -ItemType Directory -Force -Path target\winappinstaller\x86_64-pc-windows-msvc\release
        Copy-Item target\x86_64-pc-windows-msvc\release\juliaup.exe target\winappinstaller\x86_64-pc-windows-msvc\release\
        Copy-Item target\x86_64-pc-windows-msvc\release\julialauncher.exe target\winappinstaller\x86_64-pc-windows-msvc\release\
    - name: Test MSIX packaging for App Installer
      run: cargo msix --release --bundle-name winappinstallermsix --source-build-output-path ${{ format('{0}/target/winappinstaller', github.workspace) }}
