name: Build and Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

jobs:

  build-juliaup:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [windows, macos, ubuntu]
        arch: [x86_64, i686]
        include:
          - os: windows
            rstarget: pc-windows-msvc
          - os: macos
            rstarget: apple-darwin
          - os: ubuntu
            rstarget: unknown-linux-gnu
        exclude:
          - os: macos
            arch: i686
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        target: ${{matrix.arch}}-${{matrix.rstarget}}
    - name: Release build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --bins
    - uses: actions/upload-artifact@v2
      with:
        name: juliaup-${{matrix.arch}}-${{matrix.rstarget}}
        path: |
          target/release/juliaup*
          target/release/julialauncher*
          !target/release/*.d
  
  build-msix:
    needs: build-juliaup
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Download and extract bundled Julia versions
      run: |      
        $versions = Get-Content versions.json | ConvertFrom-Json
        [version]$bundledVersion = $versions.JuliaAppPackage.BundledJuliaVersion
        $bundledVersionAsString = $versions.JuliaAppPackage.BundledJuliaVersion

        mkdir -Force target\bundledjulia\downloads
        mkdir -Force target\bundledjulia\extracted\x64
        mkdir -Force target\bundledjulia\extracted\x86

        Invoke-WebRequest "https://julialang-s3.julialang.org/bin/winnt/x64/$($bundledVersion.Major).$($bundledVersion.Minor)/julia-$($bundledVersionAsString)-win64.tar.gz" -OutFile "target\bundledjulia\downloads\julia-$($bundledVersionAsString)-win64.tar.gz"
        tar -xvzf "target\bundledjulia\downloads\julia-$($bundledVersion)-win64.tar.gz" -C target\bundledjulia\extracted\x64 --strip-components=1

        Invoke-WebRequest "https://julialang-s3.julialang.org/bin/winnt/x86/$($bundledVersion.Major).$($bundledVersion.Minor)/julia-$($bundledVersionAsString)-win32.tar.gz" -OutFile "target\bundledjulia\downloads\julia-$($bundledVersionAsString)-win32.tar.gz"
        tar -xvzf "target\bundledjulia\downloads\julia-$($bundledVersion)-win32.tar.gz" -C target\bundledjulia\extracted\x86 --strip-components=1
    - name: Download x86 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-i686-pc-windows-msvc
        path: target\i686-pc-windows-msvc\release
    - name: Download x64 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-x86_64-pc-windows-msvc
        path: target\x86_64-pc-windows-msvc\release        
    - name: Build MSIX
      run: |
        push-location msix
        &"C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\MakeAppx.exe" build /f PackagingLayout.xml /op ..\target\msix
        pop-location
    - uses: actions/upload-artifact@v2
      with:
        name: msixinstaller
        path: target\msix\*.appxbundle

  build-storepayload:
    needs: [build-msix]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install StoreBroker
      run: |
        Install-Module -Name StoreBroker -Force
    - uses: actions/download-artifact@v2
      with:
        name: msixinstaller
    - name: Package
      run: |
        md (Join-Path $env:GITHUB_WORKSPACE "storepackage")
        New-SubmissionPackage -ConfigPath (Join-Path $env:GITHUB_WORKSPACE "storesubmission" "SBConfig.json") -PDPRootPath (Join-Path $env:GITHUB_WORKSPACE "storesubmission" "pdps") -ImagesRootPath (Join-Path $env:GITHUB_WORKSPACE "storesubmission" "images") -AppxPath *.appxbundle -OutPath (Join-Path $env:GITHUB_WORKSPACE "storepackage") -OutName Upload
    - uses: actions/upload-artifact@v2
      with:
        name: storepackage
        path: storepackage\*.*


  deploy-github-release:
    needs: [build-msix,build-juliaup]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download MSIX artifact
      uses: actions/download-artifact@v2
      with:
        name: msixinstaller
    - name: Download Windows x86 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-i686-pc-windows-msvc
        path: target\i686-pc-windows-msvc
    - name: Download Windows x64 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-x86_64-pc-windows-msvc
        path: target\x86_64-pc-windows-msvc
    - name: Download Linux x64 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-x86_64-unknown-linux-gnu
        path: target\x86_64-unknown-linux-gnu
    - name: Download Linux x86 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-i686-unknown-linux-gnu
        path: target\i686-unknown-linux-gnu
    - name: Download MacOS x64 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-x86_64-apple-darwin
        path: target\x86_64-apple-darwin
    - name: Archive Windows x86 juliaup
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        filename: 'i686-pc-windows-msvc.zip'
        path: target\i686-pc-windows-msvc
    - name: Archive Windows x64 juliaup
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        filename: 'x86_64-pc-windows-msvc.zip'
        path: target\x86_64-pc-windows-msvc
    - name: Archive Linux x64 juliaup
      uses: thedoctor0/zip-release@master
      with:
        type: 'tar'
        filename: 'x86_64-unknown-linux-gnu.tar.gz'
        path: target\x86_64-unknown-linux-gnu
    - name: Archive Linux x86 juliaup
      uses: thedoctor0/zip-release@master
      with:
        type: 'tar'
        filename: 'i686-unknown-linux-gnu.tar.gz'
        path: target\i686-unknown-linux-gnu
    - name: Archive MacOS x64 juliaup
      uses: thedoctor0/zip-release@master
      with:
        type: 'tar'
        filename: 'x86_64-apple-darwin.tar.gz'
        path: target\x86_64-apple-darwin
    - name: Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "*.appxbundle,*.zip,*.tar.gz"
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy-dev-channel-winstore:
    needs: [build-storepayload]
    environment: dev-channel
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Install StoreBroker
      run: Install-Module -Name StoreBroker -Force
    - uses: actions/download-artifact@v2
      with:
        name: storepackage      
    - name: Authenticate with store
      env:
        TENANTID: ${{ secrets.TENANTID }}
        CLIENTID: ${{ secrets.CLIENTID }}
        CLIENTSECRET: ${{ secrets.CLIENTSECRET }}
      run: |
        $sec = ConvertTo-SecureString $env:CLIENTSECRET -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential $env:CLIENTID, $sec
        Set-StoreBrokerAuthentication -TenantId $env:TENANTID -Credential $cred
        Update-ApplicationFlightSubmission -ReplacePackages -AppId 9NJNWW8PVKMN -FlightId 2e2f9fe8-3950-4273-b80d-7f752296ca86 -SubmissionDataPath ".\Upload.json" -PackagePath ".\Upload.zip" -AutoCommit -Force

  deploy-releasepreview-channel-winstore:
    needs: [build-storepayload]
    environment: release-preview-channel
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Install StoreBroker
      run: Install-Module -Name StoreBroker -Force
    - uses: actions/download-artifact@v2
      with:
        name: storepackage      
    - name: Authenticate with store
      env:
        TENANTID: ${{ secrets.TENANTID }}
        CLIENTID: ${{ secrets.CLIENTID }}
        CLIENTSECRET: ${{ secrets.CLIENTSECRET }}
      run: |
        $sec = ConvertTo-SecureString $env:CLIENTSECRET -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential $env:CLIENTID, $sec
        Set-StoreBrokerAuthentication -TenantId $env:TENANTID -Credential $cred
        Update-ApplicationFlightSubmission -ReplacePackages -AppId 9NJNWW8PVKMN -FlightId 732b234a-7ea9-4b65-8c9f-b9d9eaefb578 -SubmissionDataPath ".\Upload.json" -PackagePath ".\Upload.zip" -AutoCommit -Force

  deploy-release-channel-winstore:
    needs: [build-storepayload]
    environment: release-channel
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Install StoreBroker
      run: Install-Module -Name StoreBroker -Force
    - uses: actions/download-artifact@v2
      with:
        name: storepackage      
    - name: Authenticate with store
      env:
        TENANTID: ${{ secrets.TENANTID }}
        CLIENTID: ${{ secrets.CLIENTID }}
        CLIENTSECRET: ${{ secrets.CLIENTSECRET }}
      run: |
        $sec = ConvertTo-SecureString $env:CLIENTSECRET -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential $env:CLIENTID, $sec
        Set-StoreBrokerAuthentication -TenantId $env:TENANTID -Credential $cred
        Update-ApplicationSubmission -ReplacePackages -AppId 9NJNWW8PVKMN -SubmissionDataPath ".\Upload.json" -PackagePath ".\Upload.zip" -AutoCommit -Force

  deploy-release-channel-aur:
    needs: build-juliaup
    environment: dev-channel
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout PKGBUILD repo
        run: |
          echo "$AUR_SSH_KEY" > ~/aur_ssh_key
          chmod 600 ~/aur_ssh_key
          git config --global core.sshCommand "ssh -i ~/aur_ssh_key -o 'StrictHostKeyChecking=no'"
          git clone "aur@aur.archlinux.org:juliaup.git" .
        env:
          AUR_SSH_KEY: ${{ secrets.AUR_SSH_KEY }}
      - name: Update version
        run: |
          export VERSION=$(echo $GH_REF | sed 's:refs/tags/v::')
          sed -i "s/^pkgver=.*\$/pkgver=${VERSION}/g" PKGBUILD
        env:
          GH_REF: ${{ github.ref }}
      - name: Update .SRCINFO and checksum
        uses: datakrama/archlinux-package-action@v1
        with:
          flags: ''
          namcap: false
          updpkgsums: true
          srcinfo: true
      - name: Commit and push changes
        run: |
          git config --global user.email "simeondavidschaub99@gmail.com"
          git config --global user.name 'Your friendly Juliaup bot'
          git commit -a -m 'automated version bump'
          git push origin master
