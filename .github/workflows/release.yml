name: Build and Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

jobs:

  build-juliaup:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        target: [
          x86_64-pc-windows-msvc,
          x86_64-apple-darwin,
          x86_64-unknown-linux-gnu,
          i686-pc-windows-msvc,
          i686-unknown-linux-gnu, 
          aarch64-unknown-linux-gnu,
          aarch64-apple-darwin
          ]
        include:
          - target: x86_64-pc-windows-msvc
            os: windows
            features: selfupdate,windowsstore
          - target: x86_64-apple-darwin
            os: macos
            features: selfupdate
          - target: x86_64-unknown-linux-gnu
            os: ubuntu
            features: selfupdate
          - target: i686-pc-windows-msvc
            os: windows
            features: selfupdate,windowsstore
          - target: i686-unknown-linux-gnu
            os: ubuntu
            features: selfupdate
          - target: aarch64-unknown-linux-gnu
            os: ubuntu
            features: selfupdate
          - target: aarch64-apple-darwin
            os: macos
            features: selfupdate
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        target: ${{matrix.target}}
    - name: Release build
      uses: actions-rs/cargo@v1
      with:
        command: build
        use-cross: ${{ matrix.os == 'ubuntu' }}
        args: --release --bins --target ${{matrix.target}} --features ${{matrix.features}}
    - uses: actions/upload-artifact@v2
      with:
        name: juliaup-${{matrix.target}}
        path: |
          target/${{matrix.target}}/release/juliaup*
          target/${{matrix.target}}/release/julialauncher*
          !target/${{matrix.target}}/release/*.d

  test-juliaup:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        target: [
          x86_64-pc-windows-msvc,
          x86_64-apple-darwin,
          x86_64-unknown-linux-gnu,
          i686-pc-windows-msvc,
          ]
        include:
          - target: x86_64-pc-windows-msvc
            os: windows
            features: dummy
          - target: x86_64-apple-darwin
            os: macos
            features: selfupdate
          - target: x86_64-unknown-linux-gnu
            os: ubuntu
            features: selfupdate
          - target: i686-pc-windows-msvc
            os: windows
            features: dummy
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        target: ${{matrix.target}}
    - name: Test
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --target ${{matrix.target}} --features ${{matrix.features}}
  
  build-tarballs:
    needs: [build-juliaup]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download Windows x86 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-i686-pc-windows-msvc
        path: target/i686-pc-windows-msvc
    - name: Download Windows x64 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-x86_64-pc-windows-msvc
        path: target/x86_64-pc-windows-msvc
    - name: Download Linux x64 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-x86_64-unknown-linux-gnu
        path: target/x86_64-unknown-linux-gnu
    - name: Download Linux x86 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-i686-unknown-linux-gnu
        path: target/i686-unknown-linux-gnu
    - name: Download MacOS x64 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-x86_64-apple-darwin
        path: target/x86_64-apple-darwin
    - name: Download MacOS aarch64 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-aarch64-apple-darwin
        path: target/aarch64-apple-darwin
    - name: Download Linux aarch64 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-aarch64-unknown-linux-gnu
        path: target/aarch64-unknown-linux-gnu
    - name: Set permissions
      run: |
        chmod a+rx target/x86_64-unknown-linux-gnu/juliaup
        chmod a+rx target/x86_64-unknown-linux-gnu/julialauncher
        chmod a+rx target/i686-unknown-linux-gnu/juliaup
        chmod a+rx target/i686-unknown-linux-gnu/julialauncher
        chmod a+rx target/x86_64-apple-darwin/juliaup
        chmod a+rx target/x86_64-apple-darwin/julialauncher
        chmod a+rx target/aarch64-apple-darwin/juliaup
        chmod a+rx target/aarch64-apple-darwin/julialauncher
        chmod a+rx target/aarch64-unknown-linux-gnu/juliaup
        chmod a+rx target/aarch64-unknown-linux-gnu/julialauncher
    - name: Export version
      run: |
        export VERSION=$(echo $GH_REF | sed 's:refs/tags/v::')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
      env:
          GH_REF: ${{ github.ref }}
    - name: Create archives
      run: |
        mkdir public
        mkdir public/bin

        cd target/i686-pc-windows-msvc
        zip ../../public/bin/juliaup-${{ env.VERSION }}-i686-pc-windows-msvc.zip ./*

        cd ../../target/x86_64-pc-windows-msvc
        zip ../../public/bin/juliaup-${{ env.VERSION }}-x86_64-pc-windows-msvc.zip ./*

        cd ../../target/x86_64-unknown-linux-gnu
        tar -czvf ../../public/bin/juliaup-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz .
        
        cd ../../target/i686-unknown-linux-gnu
        tar -czvf ../../public/bin/juliaup-${{ env.VERSION }}-i686-unknown-linux-gnu.tar.gz .

        cd ../../target/x86_64-apple-darwin
        tar -czvf ../../public/bin/juliaup-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz .

        cd ../../target/aarch64-apple-darwin
        tar -czvf ../../public/bin/juliaup-${{ env.VERSION }}-aarch64-apple-darwin.tar.gz .

        cd ../../target/aarch64-unknown-linux-gnu
        tar -czvf ../../public/bin/juliaup-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz .
    - uses: actions/upload-artifact@v2
      with:
        name: juliaup-tarballs
        path: public/bin/*

  build-msix:
    needs: build-juliaup
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Download and extract bundled Julia versions
      run: |      
        $versions = Get-Content versions.json | ConvertFrom-Json
        [version]$bundledVersion = $versions.JuliaAppPackage.BundledJuliaVersion
        $bundledVersionAsString = $versions.JuliaAppPackage.BundledJuliaVersion

        mkdir -Force target\bundledjulia\downloads
        mkdir -Force target\bundledjulia\extracted\x64
        mkdir -Force target\bundledjulia\extracted\x86

        Invoke-WebRequest "https://julialang-s3.julialang.org/bin/winnt/x64/$($bundledVersion.Major).$($bundledVersion.Minor)/julia-$($bundledVersionAsString)-win64.tar.gz" -OutFile "target\bundledjulia\downloads\julia-$($bundledVersionAsString)-win64.tar.gz"
        tar -xvzf "target\bundledjulia\downloads\julia-$($bundledVersion)-win64.tar.gz" -C target\bundledjulia\extracted\x64 --strip-components=1

        Invoke-WebRequest "https://julialang-s3.julialang.org/bin/winnt/x86/$($bundledVersion.Major).$($bundledVersion.Minor)/julia-$($bundledVersionAsString)-win32.tar.gz" -OutFile "target\bundledjulia\downloads\julia-$($bundledVersionAsString)-win32.tar.gz"
        tar -xvzf "target\bundledjulia\downloads\julia-$($bundledVersion)-win32.tar.gz" -C target\bundledjulia\extracted\x86 --strip-components=1
    - name: Download x86 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-i686-pc-windows-msvc
        path: target\i686-pc-windows-msvc\release
    - name: Download x64 juliaup artifact
      uses: actions/download-artifact@v2
      with:
        name: juliaup-x86_64-pc-windows-msvc
        path: target\x86_64-pc-windows-msvc\release        
    - name: Build MSIX
      run: |
        push-location msix
        &"C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\MakeAppx.exe" build /f PackagingLayout.xml /op ..\target\msix
        pop-location
    - uses: actions/upload-artifact@v2
      with:
        name: msixinstaller
        path: target\msix\*.appxbundle

  build-storepayload:
    needs: [build-msix]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install StoreBroker
      run: |
        Install-Module -Name StoreBroker -Force
    - uses: actions/download-artifact@v2
      with:
        name: msixinstaller
    - name: Package
      run: |
        md (Join-Path $env:GITHUB_WORKSPACE "storepackage")
        New-SubmissionPackage -ConfigPath (Join-Path $env:GITHUB_WORKSPACE "storesubmission" "SBConfig.json") -PDPRootPath (Join-Path $env:GITHUB_WORKSPACE "storesubmission" "pdps") -ImagesRootPath (Join-Path $env:GITHUB_WORKSPACE "storesubmission" "images") -AppxPath *.appxbundle -OutPath (Join-Path $env:GITHUB_WORKSPACE "storepackage") -OutName Upload
    - uses: actions/upload-artifact@v2
      with:
        name: storepackage
        path: storepackage\*.*

  deploy-github-release-binaries:
    needs: [build-tarballs,test-juliaup]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download tarball artifacts
      uses: actions/download-artifact@v2
      with:
        name: juliaup-tarballs
        path: public/bin
    - name: Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "public/bin/*.zip,public/bin/*.tar.gz"
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy-s3-release-binaries:
    needs: [build-tarballs,test-juliaup]
    runs-on: ubuntu-latest
    environment: dev-channel
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download tarball artifacts
      uses: actions/download-artifact@v2
      with:
        name: juliaup-tarballs
        path: public/bin
    - name: Upload to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --cache-control public,max-age=2678400 --metadata-directive REPLACE
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE_DIR: 'public'

  deploy-dev-channel-winstore:
    needs: [build-storepayload,test-juliaup]
    environment: dev-channel
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Install StoreBroker
      run: Install-Module -Name StoreBroker -Force
    - uses: actions/download-artifact@v2
      with:
        name: storepackage      
    - name: Authenticate with store
      env:
        TENANTID: ${{ secrets.TENANTID }}
        CLIENTID: ${{ secrets.CLIENTID }}
        CLIENTSECRET: ${{ secrets.CLIENTSECRET }}
      run: |
        $sec = ConvertTo-SecureString $env:CLIENTSECRET -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential $env:CLIENTID, $sec
        Set-StoreBrokerAuthentication -TenantId $env:TENANTID -Credential $cred
        Update-ApplicationFlightSubmission -ReplacePackages -AppId 9NJNWW8PVKMN -FlightId 2e2f9fe8-3950-4273-b80d-7f752296ca86 -SubmissionDataPath ".\Upload.json" -PackagePath ".\Upload.zip" -AutoCommit -Force

  deploy-releasepreview-channel-winstore:
    needs: [build-storepayload,test-juliaup]
    environment: release-preview-channel
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Install StoreBroker
      run: Install-Module -Name StoreBroker -Force
    - uses: actions/download-artifact@v2
      with:
        name: storepackage      
    - name: Authenticate with store
      env:
        TENANTID: ${{ secrets.TENANTID }}
        CLIENTID: ${{ secrets.CLIENTID }}
        CLIENTSECRET: ${{ secrets.CLIENTSECRET }}
      run: |
        $sec = ConvertTo-SecureString $env:CLIENTSECRET -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential $env:CLIENTID, $sec
        Set-StoreBrokerAuthentication -TenantId $env:TENANTID -Credential $cred
        Update-ApplicationFlightSubmission -ReplacePackages -AppId 9NJNWW8PVKMN -FlightId 732b234a-7ea9-4b65-8c9f-b9d9eaefb578 -SubmissionDataPath ".\Upload.json" -PackagePath ".\Upload.zip" -AutoCommit -Force

  deploy-release-channel-winstore:
    needs: [build-storepayload,test-juliaup]
    environment: release-channel
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Install StoreBroker
      run: Install-Module -Name StoreBroker -Force
    - uses: actions/download-artifact@v2
      with:
        name: storepackage      
    - name: Authenticate with store
      env:
        TENANTID: ${{ secrets.TENANTID }}
        CLIENTID: ${{ secrets.CLIENTID }}
        CLIENTSECRET: ${{ secrets.CLIENTSECRET }}
      run: |
        $sec = ConvertTo-SecureString $env:CLIENTSECRET -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential $env:CLIENTID, $sec
        Set-StoreBrokerAuthentication -TenantId $env:TENANTID -Credential $cred
        Update-ApplicationSubmission -ReplacePackages -AppId 9NJNWW8PVKMN -SubmissionDataPath ".\Upload.json" -PackagePath ".\Upload.zip" -AutoCommit -Force

  deploy-release-channel-aur:
    needs: [build-juliaup,test-juliaup]
    environment: release-preview-channel
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout PKGBUILD repo
        run: |
          echo "$AUR_SSH_KEY" > ~/aur_ssh_key
          chmod 600 ~/aur_ssh_key
          git config --global core.sshCommand "ssh -i ~/aur_ssh_key -o 'StrictHostKeyChecking=no'"
          git clone "aur@aur.archlinux.org:juliaup.git" .
        env:
          AUR_SSH_KEY: ${{ secrets.AUR_SSH_KEY }}
      - name: Update version
        run: |
          export VERSION=$(echo $GH_REF | sed 's:refs/tags/v::')
          sed -i "s/^pkgver=.*\$/pkgver=${VERSION}/g" PKGBUILD
          sed -i "s/^pkgrel=.*\$/pkgrel=1/g" PKGBUILD
        env:
          GH_REF: ${{ github.ref }}
      - name: Update .SRCINFO and checksum
        uses: datakrama/archlinux-package-action@v1
        with:
          flags: ''
          namcap: false
          updpkgsums: true
          srcinfo: true
      - name: Commit and push changes
        run: |
          export VERSION=$(echo $GH_REF | sed 's:refs/tags/v::')
          git config --global user.email "simeondavidschaub99@gmail.com"
          git config --global user.name 'Your friendly Juliaup bot'
          git commit -a -m "Version ${VERSION} (automated version bump)"
          git push origin master
        env:
          GH_REF: ${{ github.ref }}

  deploy-dev-channel-s3:
    needs: [deploy-s3-release-binaries,test-juliaup]
    environment: dev-channel
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - name: Create output dir
        run: mkdir public
      - name: Export version
        run: |
          export VERSION=$(echo $GH_REF | sed 's:refs/tags/v::')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "$VERSION" > public/DEVCHANNELVERSION          
        env:
          GH_REF: ${{ github.ref }}
      - name: Copy shell script
        run: |
          cp deploy/shellscript/juliaup-init.sh public/juliaup-init-dev.sh
          sed -i -e "s/THISISREPLACEDWITHREALVERSIONINGITHUBWORKFLOW/$VERSION/g" public/juliaup-init-dev.sh
          sed -i -e 's|THISISREPLACEDWITHCHANNELCONFIGINGITHUBWORKFLOW|$_bindir/juliaup selfchannel dev|g' public/juliaup-init-dev.sh
        env:
          VERSION: ${{ env.VERSION }}
      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --cache-control public,max-age=0 --metadata-directive REPLACE
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: 'public'

  deploy-releasepreview-channel-s3:
    needs: [deploy-s3-release-binaries,test-juliaup]
    environment: release-preview-channel
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - name: Create output dir
        run: mkdir public
      - name: Export version
        run: |
          export VERSION=$(echo $GH_REF | sed 's:refs/tags/v::')
          echo "$VERSION" > public/RELEASEPREVIEWCHANNELVERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        env:
          GH_REF: ${{ github.ref }}
      - name: Copy shell script
        run: |
          cp deploy/shellscript/juliaup-init.sh public/juliaup-init-releasepreview.sh
          sed -i -e "s/THISISREPLACEDWITHREALVERSIONINGITHUBWORKFLOW/$VERSION/g" public/juliaup-init-releasepreview.sh
          sed -i -e 's|THISISREPLACEDWITHCHANNELCONFIGINGITHUBWORKFLOW|$_bindir/juliaup selfchannel releasepreview|g' public/juliaup-init-releasepreview.sh
        env:
          VERSION: ${{ env.VERSION }}
      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --cache-control public,max-age=300 --metadata-directive REPLACE
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: 'public'

  deploy-release-channel-s3:
    needs: [deploy-s3-release-binaries,test-juliaup]
    environment: release-channel
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - name: Create output dir
        run: mkdir public
      - name: Export version
        run: |
          export VERSION=$(echo $GH_REF | sed 's:refs/tags/v::')
          echo "$VERSION"
          echo "$VERSION" > public/RELEASECHANNELVERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        env:
          GH_REF: ${{ github.ref }}
      - name: Copy shell script
        run: |
          cp deploy/shellscript/juliaup-init.sh public/juliaup-init.sh
          sed -i -e "s/THISISREPLACEDWITHREALVERSIONINGITHUBWORKFLOW/$VERSION/g" public/juliaup-init.sh
          sed -i -e 's|THISISREPLACEDWITHCHANNELCONFIGINGITHUBWORKFLOW|$_bindir/juliaup selfchannel release|g' public/juliaup-init.sh
        env:
          VERSION: ${{ env.VERSION }}
      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --cache-control public,max-age=3600 --metadata-directive REPLACE
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: 'public'
